Example-1-------------------------------------------------

PROGAM DEMO;
TYPE T = INTEGER;
VAR A : ARRAY(. 10 .) OF T;
    N : INTEGER;

PROCEDURE INPUT;
VAR I : INTEGER;
BEGIN
  N := READI;
  FOR I := 1 TO N DO
     A(.I.) := READI;
END;

PROCEDURE OUTPUT;
VAR I : INTEGER;
BEGIN
    I := N;
    WHILE I > 0 DO
    BEGIN
        CALL WRITEI(A(.I.));
        CALL WRITELN;
        I := I - 1;
    END
END;

FUNCTION GET_MAX: INTEGER;
VAR I: INTEGER;
    MAX : INTEGER;
BEGIN
    I := 1;
    MAX := A(.I.);
    
    FOR I := 2 TO N DO
    BEGIN
        IF MAX < A(.I.) THEN MAX := A(.I.)   
    END
END;

BEGIN
    CALL INPUT;
    CALL OUTPUT;
    CALL WRITEI(GET_MAX);
END. 

Example-2------------------------------------------------------

void compileIndexes(void)
{
  if (lookAhead->tokenType == SB_LSEL)
  {
    eat(SB_LSEL);
    compileExpression();
    eat(SB_RSEL);
    compileIndexes();
  }
}

Example-3-------------------------------------------------------
CallSt ::= ProcedureIdent Arguments
----------------------------------------------------------------
void compileStatement(void)
{
  switch (lookAhead->tokenType)
  {
    case TK_IDENT:
      assert("Parsing an assign or call statement ....");
      eat(TK_IDENT);
      switch (lookAhead->tokenType)
      {
        case SB_LSEL:
          compileIndexes();
          break;
        case SB_ASSIGN:
          compileIndexes();
          break;
        case SB_LPAR:
          compileAssignSt();
          break;
        default:
          break;
      }
      break;
    case KW_BEGIN:
      compileGroupSt();
      break;
    case KW_IF:
      compileIfSt();
      break;
    case KW_WHILE:
      compileWhileSt();
      break;
    case KW_FOR:
      compileForSt();
      break;
    case SB_SEMICOLON:
    case KW_END:
    case KW_ELSE:
      break;
    default:
      error(ERR_INVALIDSTATEMENT, lookAhead->lineNo, lookAhead->colNo);
      break;
  }
}


void compileCallSt(void)
{
  eat(TK_IDENT);
  compileArguments();
}

Example-4------------------------------------------------------------------------

Token * readIdentKeyword(void)
{
  Token * token = makeToken(TK_NONE, lineNo, colNo);
  int count = 1;

  token->string[0] = (char)currentChar;
  if (charCodes[token->string[0]] == CHAR_DIGIT) {
    error(ERR_INVALIDIDENT, lineNo, colNo);
  }
  readChar();

  while ((currentChar != EOF) &&
         ((charCodes[currentChar] == CHAR_LETTER) ||
          (charCodes[currentChar] == CHAR_DIGIT) || (currentChar == '-')))
  {
    if (count <= 15)
      token->string[count++] = (char)currentChar;
    readChar();
  }

  token->string[count] = '\0';
  token->tokenType = checkKeyword(token->string);

  if (token->tokenType == TK_NONE)
    token->tokenType = TK_IDENT;

  return token;
}

Example-5------------------------------------------------------------------------------
VarDecl ::= TK_IDENT VarDecls2 SB_COLON TYPE SB_SEMICOLON
VarDecls2 ::= SM_COMMA TK_IDENT VarDecls2
VarDecls2 ::= !3
----------------------------------------------------------------------------------------
void compileVarDecl(void)
{
  eat(TK_IDENT);
  compileVarDecls2();
  eat(SB_COLON);
  compileType();
  eat(SB_SEMICOLON);
}

void compileVarDecls2(void)
{
  if (lookAhead->tokenType == SB_COMMA)
  {
    eat(SB_COMMA);
    eat(TK_IDENT);
    compileVarDecls2();
  }
}

Example-6------------------------------------------------------------------
Arguments ::= SB_LPAR Arguments1 SB_RPAR
Arguments1 ::= Expression Arguments2
Arguments1 ::= !3
Arguments2 ::= SB_COMMA Expression Arguments2
Arguments2 ::= !3
---------------------------------------------------------------------------

void compileArguments(void)
{
  switch (lookAhead->tokenType)
  {
    case SB_LPAR:
      eat(SB_LPAR);
      compileExpression();
      compileArguments2();
      eat(SB_RPAR);
      break;
    case SB_TIMES:
    case SB_SLASH:
    case SB_PLUS:
    case SB_MINUS:
    case KW_TO:
    case KW_DO:
    case SB_RPAR:
    case SB_COMMA:
    case SB_EQ:
    case SB_NEQ:
    case SB_LE:
    case SB_LT:
    case SB_GE:
    case SB_GT:
    case SB_RSEL:
    case SB_SEMICOLON:
    case KW_END:
    case KW_ELSE:
    case KW_THEN:
      break;
    default:
      error(ERR_INVALIDARGUMENTS, lookAhead->lineNo, lookAhead->colNo);
  }
}

void compileArguments2(void)
{
  if (lookAhead->tokenType == SB_COMMA)
  {
    eat(SB_COMMA);
    compileExpression();
    compileArguments2();
  }
}

Example-7--------------------------------------------------------------------------
Declareration
-----------------------------------------------------------------------------------
void compileDeclarations(void)
{
    switch (lookAhead->tokenType)
    {
    case KW_CONST:
        eat(KW_CONST);
        compileConstDecl();
        compileConstDecls();
        compileDeclarations();
        break;
    case KW_TYPE:
        eat(KW_TYPE);
        compileTypeDecl();
        compileTypeDecls();
        compileDeclarations();
        break;
    case KW_VAR:
        eat(KW_VAR);
        compileVarDecl();
        compileVarDecls();
        compileDeclarations();
        break;
    case KW_PROCEDURE:
    case KW_FUNCTION:
        compileSubDecls();
        compileDeclarations();
    default:
        break;
    }
}

void compileBlock2(void)
{
    eat(KW_BEGIN);
    compileStatements();
    eat(KW_END);
}

void compileBlock(void)
{
    assert("Parsing a Block ....");
    compileDeclarations();
    compileBlock2();
    assert("Block parsed!");
}